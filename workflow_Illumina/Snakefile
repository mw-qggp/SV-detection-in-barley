FASTA = "/gpfs/project/mawei111/Hv-DRR-DNAseq2020/experiments/00_genome_mutation/genome_chr1H.fa"

PATH_simulated_refs="ms_genomes/"

SAMPLES = ["del_50_300","del_301_5000", "del_5001_50000", "del_50001_250000", "del_250001_1000000","inv_50_300","inv_301_5000", "inv_5001_50000", "inv_50001_250000", "inv_250001_1000000","dup_50_300","dup_301_5000", "dup_5001_50000", "dup_50001_250000", "dup_250001_1000000","ins_50_300","ins_301_5000", "ins_5001_50000", "ins_50001_250000", "ins_250001_1000000"]

COVERAGE= ["65","25","12.5","6","3","1.5"]

rule all:
	input:
		expand("Illumina/NGSEP2_{sample}_{cov}_SV.gff", sample = SAMPLES, cov = COVERAGE),
		expand("Illumina/gridss_{sample}_{cov}.bam", sample = SAMPLES, cov = COVERAGE),
		expand("Illumina/smoove_{sample}_{cov}/{sample}_{cov}-smoove.vcf.gz", sample = SAMPLES, cov = COVERAGE),
		expand("Illumina/delly_{sample}_{cov}.vcf", sample = SAMPLES, cov = COVERAGE),
		expand("Illumina/{sample}_{cov}.mantadir/results/variants/diploidSV_INV.vcf", sample = SAMPLES, cov = COVERAGE)
		
rule simulate_reads:
	input:
		mut_ref=PATH_simulated_refs+"genome_chr1H_mutated_{sample}.fa" 

	output:
		out1="{sample}_{cov}/{sample}_{cov}_R1.fastq.gz",
		out2="{sample}_{cov}/{sample}_{cov}_R2.fastq.gz"

	params:
		p_1="true", 
		p_2="40",
		p_3="150", 
		p_4="{cov}",
		p_5="350",
		p_6="450",
		p_7="40",
		p_8="35",
		p_9="25"

	shell:
		"/gpfs/project/projects/qggp/src/bbmap/randomreads.sh ref={input.mut_ref} paired={params.p_1} q={params.p_2} length={params.p_3} coverage={params.p_4} mininsert={params.p_5} maxinsert={params.p_6} maxq={params.p_7} midq={params.p_8} minq={params.p_9} out1={output.out1} out2={output.out2}"

rule trimming:
	input:
		in_r1=rules.simulate_reads.out1,
		in_r2=rules.simulate_reads.out2
	output:
		out_r1_p="{sample}_{cov}_trimmed_paired_1.fq.gz",
		out_r1_unp="{sample}_{cov}_trimmed_unpaired_1.fq.gz",
		out_r2_p="{sample}_{cov}_trimmed_paired_2.fq.gz",
		out_r2_unp="{sample}_{cov}_trimmed_unpaired_2.fq.gz"
	shell:
		"module load Java/1.8.0_151; java -jar /gpfs/project/projects/qggp/src/Trimmomatic-0.39/trimmomatic-0.39.jar PE -threads 3 {input.in_r1} {input.in_r2} {output.out_r1_p} {output.out_r1_unp} {output.out_r2_p} {output.out_r2_unp} ILLUMINACLIP:TruSeq3-PE.fa:2:30:10 SLIDINGWINDOW:4:15 MINLEN:36"

rule bwa_mapping:
	input:
		ref=FASTA,
		fastq_r1=rules.trimming.output.out_r1_p,
		fastq_r2=rules.trimming.output.out_r2_p

	output:
		sam="{sample}_{cov}.sam"
	shell:
		"module load BWA; bwa mem -t 4 {input.ref} {input.fastq_r1} {input.fastq_r2} >{output.sam}; rm {input.fastq_r1} {input.fastq_r2}"

rule convert_sam:
	input:
		sam=rules.bwa_mapping.output.sam
	output:
		bam="{sample}_{cov}_sorted.bam",
		bai="{sample}_{cov}_sorted.bam.bai"
	shell:
		"module load SamTools; samtools view -Sb {input.sam} | samtools sort - >{output.bam}; rm {input.sam}; samtools index {output.bam}"

rule remove_duplicates:
	input:
		bam="{sample}_{cov}_sorted.bam"
	output:
		bam="03_removePCRduplicates/{sample}_{cov}_sorted_rmdup.bam",
		txt="03_removePCRduplicates/{sample}_{cov}_rmdup_metrics.txt"
	shell:
		"module load Java/1.8.0_151 SamTools; java -jar /gpfs/project/projects/qggp/src/picard_2.22.0/picard.jar MarkDuplicates I={input.bam} O={output.bam} REMOVE_DUPLICATES=true METRICS_FILE={output.txt}; rm {input.bam}"

rule addReadgroup:
	input:
		bam=rules.remove_duplicates.output.bam
	output:
		bamo="03_removePCRduplicates/{sample}_{cov}_sorted_rmdup_rd.bam",
		bai="03_removePCRduplicates/{sample}_{cov}_sorted_rmdup_rd.bam.bai"
	shell:
		"module load Java/1.8.0_151 SamTools; java -jar /gpfs/project/projects/qggp/src/picard_2.22.0/picard.jar AddOrReplaceReadGroups I={input.bam} O={output.bamo} RGID=group1 RGLB=lib1 RGPL=ILLUMINA RGPU=unit1 RGSM=20; samtools index {output.bamo}"

#########Variant calling programs########

rule manta1:
	input:
		bam=rules.addReadgroup.output.bamo,
		ref=FASTA
	output:
		py="Illumina/{sample}_{cov}.mantadir/runWorkflow.py"
	params:
		folder="Illumina/{sample}_{cov}.mantadir/"

	shell:
		"/gpfs/project/projects/qggp/src/manta-1.6.0.centos6_x86_64/bin/configManta.py --bam {input.bam} --referenceFasta {input.ref} --runDir {params.folder}"

rule manta2:
	input:
		py="Illumina/{sample}_{cov}.mantadir/runWorkflow.py"
	output:
		vcf="Illumina/{sample}_{cov}.mantadir/results/variants/diploidSV.vcf.gz"
	shell:
		"{input.py} -j 4 -g 5"

rule manta3:
	input:
		vcf=rules.manta2.output.vcf,
		ref=FASTA
	output:
		vcf="Illumina/{sample}_{cov}.mantadir/results/variants/diploidSV_INV.vcf"
	params:
		vcf="Illumina/{sample}_{cov}.mantadir/results/variants/diploidSV.vcf",
		workspace="Illumina/{sample}_{cov}.mantadir/workspace/"
	run:
		shell("zcat {input.vcf} >{params.vcf}")
		shell("/gpfs/project/projects/qggp/src/manta-1.6.0.centos6_x86_64/libexec/convertInversion.py /gpfs/project/projects/qggp/src/manta-1.6.0.centos6_x86_64/libexec/samtools {input.ref} {params.vcf} >{output.vcf}")
		shell("rm {params.vcf}")


rule delly:
	input:
		ref=FASTA,
		bam=rules.addReadgroup.output.bamo
	output:
		bcf="Illumina/delly_{sample}_{cov}.bcf"
	shell:
		"/gpfs/project/projects/qggp/src/delly_v0.8.1_linux_x86_64bit call -o {output.bcf} -g {input.ref} {input.bam}"

rule delly2:
	input:
		bcf="Illumina/delly_{sample}_{cov}.bcf"
	output:
		vcf="Illumina/delly_{sample}_{cov}.vcf"
	shell:
		"module load bcftools/1.12; bcftools view {input.bcf} >{output.vcf}"

rule lumpy:
	input:
		bam=rules.addReadgroup.output.bamo,
		ref=FASTA
	output:
		vcf="Illumina/smoove_{sample}_{cov}/{sample}_{cov}-smoove.vcf.gz"
	params:
		outdir="Illumina/smoove_{sample}_{cov}",
		name="{sample}_{cov}"
	shell:
		"""module load SamTools lumpy/0.3.0; PATH="$HOME/bin:$PATH:/gpfs/project/projects/qggp/src/gsort"; export PATH=$PATH:/gpfs/project/projects/qggp/src:$PATH; PATH="$HOME/bin:$PATH:/home/mawei111/.conda/envs/py3/bin/mosdepth"; export PATH=$PATH:/home/mawei111/.conda/envs/py3/bin:mosdepth; /gpfs/project/projects/qggp/src/smoove call --name {params.name} --fasta {input.ref} --outdir {params.outdir} {input.bam}"""

rule gridss:
	input:
		ref=FASTA,
		bam=rules.addReadgroup.output.bamo

	output:
		vcf="Illumina/gridss_{sample}_{cov}.vcf",
		bam="Illumina/gridss_{sample}_{cov}.bam"
	shell:
		"module load BWA/0.7.15 Java/1.8.0_151 sambamba/0.6.6 R/3.5.3; sh /gpfs/project/projects/qggp/src/gridss-2.6.2/scripts/gridss.sh --output {output.vcf} --threads 4 --reference {input.ref} --assembly {output.bam} --jar /gpfs/project/projects/qggp/src/gridss-2.6.2/scripts/gridss-2.8.3-gridss-jar-with-dependencies.jar --jvmheap 31g {input.bam}; rm -r *.working"

rule NGSEP2:
	input:
		ref=FASTA,
		bam=rules.addReadgroup.output.bamo
	output:
		csv="Illumina/NGSEP2_{sample}_{cov}_SV.gff"
	params:
		csv="Illumina/NGSEP2_{sample}_{cov}"
	shell:
		"module load Java/1.8.0_151; java -jar /gpfs/project/projects/qggp/src/NGSEPcore_3.3.2.jar FindVariants -ignoreXS -noSNVS -runRD -runRP -maxAlnsPerStartPos 2 -minMQ 0 {input.ref} {input.bam} {params.csv}"
